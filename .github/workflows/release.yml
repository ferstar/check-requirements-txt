name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write  # Required for creating releases

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13", "3.14"]

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Cache Hatch environments
      uses: actions/cache@v4
      with:
        path: |
          ~/.local/share/hatch
          ~/.cache/hatch
        key: hatch-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          hatch-${{ runner.os }}-${{ matrix.python-version }}-
          hatch-${{ runner.os }}-

    - name: Install hatch
      run: pip install hatch

    - name: Install dependencies
      run: |
        hatch env create default
        hatch env create lint

    - name: Run tests
      run: hatch run test

    - name: Run linting
      run: hatch run lint:all

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: "3.12"
        cache: 'pip'

    - name: Install hatch
      run: pip install hatch

    - name: Build package
      run: hatch build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: pypi
      url: https://pypi.org/p/check-requirements-txt
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    runs-on: ubuntu-latest
    needs: [build, publish]
    permissions:
      contents: write  # Required for creating releases

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Fetch all history for changelog generation

    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: dist
        path: dist/

    - name: Extract version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

        if [ -z "$PREV_TAG" ]; then
          # First release, get all commits
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          # Get commits since previous tag
          CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi

        # Save changelog to file
        echo "$CHANGELOG" > changelog.txt

        # Also save to output (escape newlines for GitHub Actions)
        {
          echo 'changelog<<EOF'
          echo "$CHANGELOG"
          echo 'EOF'
        } >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: Release ${{ steps.get_version.outputs.tag }}
        body_path: changelog.txt
        files: dist/*
        draft: false
        prerelease: false
        generate_release_notes: true  # Auto-generate release notes from PRs
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
